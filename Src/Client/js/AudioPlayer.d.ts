import { IMusic } from "./IMusic.js";
declare const timeConverter: (timestamp: number) => string;
declare class AudioPlayer {
    private audioElem;
    private startElem;
    private endElem;
    private lyricParentElem;
    private prevLyricIntervalId;
    private sliderUpdateIntervalId;
    private startEndIntervalId;
    private shuffleActive;
    private repeatType;
    private previousPlaylist;
    private currentlyPlaying;
    private queue;
    private shufflePlaylist;
    private currentPos;
    private sliderElem;
    private audioPlayerElem;
    private playlist;
    private lyricImg;
    private mediaControlElem;
    private audioPlayerBarElem;
    private coverImgElem;
    private titleElem;
    private artistElem;
    private volumeQueueAreaElem;
    private audioSliderElem;
    private readonly updateQueue;
    constructor(playlist: IMusic[], props: {
        updateQueue: (currentlyPlaying: IMusic, nextQueue: IMusic[]) => void;
    }, elems: {
        endElem: HTMLElement;
        audioSliderElem: HTMLInputElement;
        audioPlayerElem: HTMLElement;
        mediaControlElem: HTMLElement;
        lyricImg: HTMLElement;
        titleElem: HTMLElement;
        volumeQueueAreaElem: HTMLElement;
        artistElem: HTMLElement;
        coverImgElem: HTMLElement;
        audioElem: HTMLAudioElement;
        audioPlayerBarElem: HTMLElement;
        sliderElem: HTMLInputElement;
        lyricParentElem: HTMLElement;
        startElem: HTMLElement;
    });
    setupButtonAndEvent: () => void;
    private setActivePane;
    updateStartEnd: () => void;
    updateLyrics: (lyrics: (string | number)[][]) => void;
    updateSliderColor: () => void;
    updateSlider: () => void;
    updateSliderInterval: () => void;
    volumeInputSliderHandler: () => void;
    musicInputSliderHandler: (event: Event) => void;
    musicSliderMouseUpHandler: () => Promise<void>;
    updateMusic: (timestamp: number) => Promise<void>;
    shuffle: () => void;
    private queueHandler;
    repeat: () => void;
    pauseAudio: () => void;
    forcePlayAudio: () => void;
    playAudioEvent: (event: Event) => void;
    setupAudioImg: (imgUrl: string) => void;
    setupAudio: (music: IMusic) => void;
    private updateSliderDuration;
    setupQueue: (playlist: IMusic[]) => void;
    private playAudio;
    private backwardAudio;
    private forwardAudio;
    private musicSliderKeyUpHandler;
    skipForwardTo: (indexToForwardTo: number) => void;
}
export { AudioPlayer, timeConverter };
